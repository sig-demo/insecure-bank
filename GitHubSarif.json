{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [{
    "results":
[{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":57}}}],"partialFingerprints":{"primaryLocationLineHash":"026b7cfa3d147b3e82b597f0642c651a"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":57}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":57}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":51}},"message":{"text":"Event #3: \"org.hdivsamples.dao.AccountDao.findUsersByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":57}},"message":{"text":"Event #4: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":112}}}],"partialFingerprints":{"primaryLocationLineHash":"0b55bab3f1d1e2aaa95a8ca5e7ab0826"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":112}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":112}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":106}},"message":{"text":"Event #3: \"org.hdivsamples.dao.CashAccountDao.findCashAccountsByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":112}},"message":{"text":"Event #4: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"postNumber\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":115}}}],"partialFingerprints":{"primaryLocationLineHash":"1495ee6b599622834625e4cdc3cb5154"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":115}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":115}},"message":{"text":"Event Set 1: See details in steps 3 - 8. (Events #1 - #6)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":99}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"cashAccount\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":99}},"message":{"text":"Event #2: An instance of \"CashAccount\" was created using tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\bean\\CashAccount.java"},"region":{"startLine":7}},"message":{"text":"Event #3: Creating an instance of \"CashAccount\" with tainted data initializes member \"number\" with tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":102}},"message":{"text":"Event #4: Making call to \"org.hdivsamples.bean.CashAccount.getNumber()\". See details in steps 9 - 10. (Events #4.1 - #4.2)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":102}},"message":{"text":"Event #5: \"org.hdivsamples.bean.CashAccount.getNumber()\" returns the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":115}},"message":{"text":"Event #6: Using the tainted data \"postNumber\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\bean\\CashAccount.java"},"region":{"startLine":24}},"message":{"text":"Event #4.1: Reading the tainted data from the field \"number\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\bean\\CashAccount.java"},"region":{"startLine":24}},"message":{"text":"Event #4.2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":102}},"message":{"text":"See step 6 to return to event 4."}}}]}]}]}
,{"ruleId":"LOCALSTORAGE_WRITE/localstorage_write/_/javascript","message":{"text":"LOCALSTORAGE_WRITE: Writing to \"localStorage\".\nRemediation Advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":428}}}],"partialFingerprints":{"primaryLocationLineHash":"17bb17e72e466738ac5e93357cf66749"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":428}},"message":{"text":"Remediation advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":428}},"message":{"text":"Event Set 1: See details in step 3. (Event #1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":428}},"message":{"text":"Event #1: Writing to \"localStorage\"."}}}]}]}]}
,{"ruleId":"LOCALSTORAGE_WRITE/localstorage_write/_/javascript","message":{"text":"LOCALSTORAGE_WRITE: Writing to \"localStorage\".\nRemediation Advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":429}}}],"partialFingerprints":{"primaryLocationLineHash":"17bb17e72e466738ac5e93357cf66749"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":429}},"message":{"text":"Remediation advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":429}},"message":{"text":"Event Set 1: See details in step 3. (Event #1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":429}},"message":{"text":"Event #1: Writing to \"localStorage\"."}}}]}]}]}
,{"ruleId":"LOCALSTORAGE_WRITE/localstorage_write/_/javascript","message":{"text":"LOCALSTORAGE_WRITE: Writing to \"localStorage\".\nRemediation Advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":430}}}],"partialFingerprints":{"primaryLocationLineHash":"17bb17e72e466738ac5e93357cf66749"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":430}},"message":{"text":"Remediation advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":430}},"message":{"text":"Event Set 1: See details in step 3. (Event #1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":430}},"message":{"text":"Event #1: Writing to \"localStorage\"."}}}]}]}]}
,{"ruleId":"LOCALSTORAGE_WRITE/localstorage_write/_/javascript","message":{"text":"LOCALSTORAGE_WRITE: Writing to \"localStorage\".\nRemediation Advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":431}}}],"partialFingerprints":{"primaryLocationLineHash":"17bb17e72e466738ac5e93357cf66749"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":431}},"message":{"text":"Remediation advice: Audit the data entering\"localStorage\" to make sure it isn't sensitive.  Store sensitive data on the server and manage with sessions."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":431}},"message":{"text":"Event Set 1: See details in step 3. (Event #1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":431}},"message":{"text":"Event #1: Writing to \"localStorage\"."}}}]}]}]}
,{"ruleId":"CSRF/csrf/filesystem_modification/java","message":{"text":"CSRF: \"org.hdivsamples.controllers.DashboardController.getCertificate\" is a web-app entry point that requires protection from cross-site request forgery (CSRF).\nRemediation Advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":124}}}],"partialFingerprints":{"primaryLocationLineHash":"1c0b9a268024fb77a4ab98a01492b874"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":124}},"message":{"text":"Remediation advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":124}},"message":{"text":"Event Set 1: CSRF validation required. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":124}},"message":{"text":"Event #1: \"org.hdivsamples.controllers.DashboardController.getCertificate\" is a web-app entry point that requires protection from cross-site request forgery (CSRF)."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":124}},"message":{"text":"Event #2: No CSRF protection was detected anywhere in this application. If this is not correct, please refer to the CSRF checker reference on how to specify it via checker option."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":132}},"message":{"text":"Event #3: Calling \"FileOutputStream\" modifies the filesystem."}}}]}]}]}
,{"ruleId":"URL_MANIPULATION/url_manipulation/audit/javascript","message":{"text":"URL_MANIPULATION: Calling \"$.getJSON\" with the tainted value in \"o.url\". Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.\nRemediation Advice: URL manipulation vulnerabilities can be addressed by proper input validation. Allow listing the allowed scheme and authority, and deny listing characters that allow unsafe path traversal in the path and query parts of the URL can improve security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}}}],"partialFingerprints":{"primaryLocationLineHash":"26024156c0a5284a541a8c2b03f02c80"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}},"message":{"text":"Remediation advice: URL manipulation vulnerabilities can be addressed by proper input validation. Allow listing the allowed scheme and authority, and deny listing characters that allow unsafe path traversal in the path and query parts of the URL can improve security."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 4 - 8. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}},"message":{"text":"Event Set 2: Additional context. See details in step 9. (Event #A1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":402}},"message":{"text":"Event #1: \"o\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":412}},"message":{"text":"Event #2: Assigning: \"<storage from new>[\"url\"]\" = \"o\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":411}},"message":{"text":"Event #3: Assigning \"{\"url\" : o}\" to \"o\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}},"message":{"text":"Event #4: Passing \"o.url\" to \"$.getJSON\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}},"message":{"text":"Event #5: Calling \"$.getJSON\" with the tainted value in \"o.url\". Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":7}},"message":{"text":"Event #A1: Calling \"function\". This call passes tainted data to a sensitive sink. See details in step 10. (Event #A1.1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":369}},"message":{"text":"Event #A1.1: Calling \"function\". This call passes tainted data to a sensitive sink. See details in step 12. (Event #A1.1.1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":7}},"message":{"text":"See step 9 to return to event A1."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":402}},"message":{"text":"Event #A1.1.1: Calling at a later point \"_loadPrefetchData\". This call passes tainted data to a sensitive sink. See details in steps 14 - 18. (Events #A1.1.1.1 - #A1.1.1.5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":369}},"message":{"text":"See step 10 to return to event A1.1."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":402}},"message":{"text":"Event #A1.1.1.1: \"o\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":412}},"message":{"text":"Event #A1.1.1.2: Assigning: \"<storage from new>[\"url\"]\" = \"o\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":411}},"message":{"text":"Event #A1.1.1.3: Assigning \"{\"url\" : o}\" to \"o\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}},"message":{"text":"Event #A1.1.1.4: Passing \"o.url\" to \"$.getJSON\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":422}},"message":{"text":"Event #A1.1.1.5: Calling \"$.getJSON\" with the tainted value in \"o.url\". Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":402}},"message":{"text":"See step 12 to return to event A1.1.1."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":63}}}],"partialFingerprints":{"primaryLocationLineHash":"2bf564234b48ed819faf5269093414ab"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":63}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":63}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":59}},"message":{"text":"Event #3: \"org.hdivsamples.dao.CashAccountDao.findCashAccountsByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":63}},"message":{"text":"Event #4: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"DOM_XSS/xss/audit_dom_xss/javascript","message":{"text":"DOM_XSS: Calling \"$(\"<li>\", {\"class\" : classes.sPageButton + \" \" + btnClass, \"aria-controls\" : settings.sTableId, \"tabindex\" : settings.iTabIndex, \"id\" : ((idx === 0) && (typeof button === \"string\")) ? settings.sTableId + \"_\" + button : null}).append($(\"<a>\", {\"href\" : \"#\"}).html(btnDisplay)).appendTo\" with the tainted value in \"container\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.\nRemediation Advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":87}}}],"partialFingerprints":{"primaryLocationLineHash":"348b5673fb754293aee6ce2e297fb3ad"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":87}},"message":{"text":"Remediation advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":87}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":30}},"message":{"text":"Event #1: \"container\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":87}},"message":{"text":"Event #2: Passing \"container\" to \"$(\"<li>\", {\"class\" : classes.sPageButton + \" \" + btnClass, \"aria-controls\" : settings.sTableId, \"tabindex\" : settings.iTabIndex, \"id\" : ((idx === 0) && (typeof button === \"string\")) ? settings.sTableId + \"_\" + button : null}).append($(\"<a>\", {\"href\" : \"#\"}).html(btnDisplay)).appendTo\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":87}},"message":{"text":"Event #3: Calling \"$(\"<li>\", {\"class\" : classes.sPageButton + \" \" + btnClass, \"aria-controls\" : settings.sTableId, \"tabindex\" : settings.iTabIndex, \"id\" : ((idx === 0) && (typeof button === \"string\")) ? settings.sTableId + \"_\" + button : null}).append($(\"<a>\", {\"href\" : \"#\"}).html(btnDisplay)).appendTo\" with the tainted value in \"container\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser."}}}]}]}]}
,{"ruleId":"URL_MANIPULATION/url_manipulation/audit/javascript","message":{"text":"URL_MANIPULATION: Calling \"$.ajax\" with the tainted value in \"url\". Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.\nRemediation Advice: URL manipulation vulnerabilities can be addressed by proper input validation. Allow listing the allowed scheme and authority, and deny listing characters that allow unsafe path traversal in the path and query parts of the URL can improve security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}}}],"partialFingerprints":{"primaryLocationLineHash":"3ff59ca3ad5643570edf328ee27b5ed7"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}},"message":{"text":"Remediation advice: URL manipulation vulnerabilities can be addressed by proper input validation. Allow listing the allowed scheme and authority, and deny listing characters that allow unsafe path traversal in the path and query parts of the URL can improve security."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 4 - 6. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}},"message":{"text":"Event Set 2: Additional context. See details in step 7. (Event #A1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":328}},"message":{"text":"Event #1: \"url\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}},"message":{"text":"Event #2: Passing \"url\" to \"$.ajax\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}},"message":{"text":"Event #3: Calling \"$.ajax\" with the tainted value in \"url\". Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":7}},"message":{"text":"Event #A1: Calling \"function\". This call passes tainted data to a sensitive sink. See details in step 8. (Event #A1.1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":292}},"message":{"text":"Event #A1.1: Calling \"function\". This call passes tainted data to a sensitive sink. See details in step 10. (Event #A1.1.1)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":7}},"message":{"text":"See step 7 to return to event A1."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":328}},"message":{"text":"Event #A1.1.1: Calling at a later point \"_sendRequest\". This call passes tainted data to a sensitive sink. See details in steps 12 - 14. (Events #A1.1.1.1 - #A1.1.1.3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":292}},"message":{"text":"See step 8 to return to event A1.1."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":328}},"message":{"text":"Event #A1.1.1.1: \"url\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}},"message":{"text":"Event #A1.1.1.2: Passing \"url\" to \"$.ajax\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":332}},"message":{"text":"Event #A1.1.1.3: Calling \"$.ajax\" with the tainted value in \"url\". Constructing a URL using a tainted value. This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":328}},"message":{"text":"See step 10 to return to event A1.1.1."}}}]}]}]}
,{"ruleId":"PATH_MANIPULATION/path_manipulation/_/java","message":{"text":"PATH_MANIPULATION: Constructing a path or URI using the tainted value \"url + fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":24}}}],"partialFingerprints":{"primaryLocationLineHash":"42b1c4b70ee6d3e8deb7190f9f7942c7"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":24}},"message":{"text":"Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":24}},"message":{"text":"Event Set 1: See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":82}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"image\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":82}},"message":{"text":"Event #2: Parameter \"image\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":84}},"message":{"text":"Event #3: Passing the tainted data, \"image\", in virtual call to \"org.hdivsamples.facade.StorageFacadeImpl.load(java.lang.String)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":23}},"message":{"text":"Event #4: Parameter \"fileName\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":24}},"message":{"text":"Event #5: Constructing a path or URI using the tainted value \"url + fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."}}}]}]}]}
,{"ruleId":"RESOURCE_LEAK/resource_leak/exceptional_path/java","message":{"text":"RESOURCE_LEAK: Failing to save or close resource created by \"new java.io.FileInputStream(file)\" leaks it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":86}}}],"partialFingerprints":{"primaryLocationLineHash":"4a6df80831fca0eb6910d42fe24ccb7a"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":86}},"message":{"text":"Event Set 1: See details in steps 2 - 5. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":86}},"message":{"text":"Event #1: \"new java.io.FileInputStream(file)\" creates a new resource."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":86}},"message":{"text":"Event #2: Throwing \"java.io.IOException\" (or subclass) from call to \"getOutputStream\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":91}},"message":{"text":"Event #3: Catching exception."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":86}},"message":{"text":"Event #4: Failing to save or close resource created by \"new java.io.FileInputStream(file)\" leaks it."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"number\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":93}}}],"partialFingerprints":{"primaryLocationLineHash":"4dcf0375fd8e98c0559606e1d1e151a5"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":93}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":93}},"message":{"text":"Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":86}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"number\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":86}},"message":{"text":"Event #2: Parameter \"number\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":93}},"message":{"text":"Event #3: Using the tainted data \"number\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"SCRIPT_CODE_INJECTION/script_code_injection/audit/javascript","message":{"text":"SCRIPT_CODE_INJECTION: Calling \"setTimeout\" with the tainted value in \"fn\". This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program.\nRemediation Advice: User-controllable dynamic data should not be used as part of scripts that are executed on the server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}}}],"partialFingerprints":{"primaryLocationLineHash":"6b9b5ccd0d8ff7127b4720da5a57713f"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Remediation advice: User-controllable dynamic data should not be used as part of scripts that are executed on the server."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":81}},"message":{"text":"Event #1: \"fn\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Event #2: Passing \"fn\" to \"setTimeout\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Event #3: Calling \"setTimeout\" with the tainted value in \"fn\". This passes the tainted value to the code evaluation API and may thus allow an attacker to modify the behavior of the program."}}}]}]}]}
,{"ruleId":"XSS/xss/_/java","message":{"text":"XSS: Concatenating \"file.getOriginalFilename()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(file)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":159}}}],"partialFingerprints":{"primaryLocationLineHash":"6c1cc1062bfb891e70f8923b9f9a33be"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":159}},"message":{"text":"Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(file)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":159}},"message":{"text":"Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":159}},"message":{"text":"Event #1: Reading data from an HTTP request, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":159}},"message":{"text":"Event #2: Concatenating \"file.getOriginalFilename()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":159}},"message":{"text":"Event #3: Printing to HTML output."}}}]}]}]}
,{"ruleId":"DOM_XSS/xss/audit_dom_xss/javascript","message":{"text":"DOM_XSS: Writing the tainted value to property \"innerHTML\" of \"elBuilder\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.\nRemediation Advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":829}}}],"partialFingerprints":{"primaryLocationLineHash":"6f94f0fdc125c78cbb58f908183b3dbc"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":829}},"message":{"text":"Remediation advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":829}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":828}},"message":{"text":"Event #1: \"dataset.template(suggestion.datum)\" invokes an unknown or unresolved function which might return untrusted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":828}},"message":{"text":"Event #2: Assigning: \"compiledHtml\" = \"dataset.template(suggestion.datum)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":829}},"message":{"text":"Event #3: Calling \"wrapper.replace(\"%body\", compiledHtml)\" passes \"compiledHtml\" to its return value."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":829}},"message":{"text":"Event #4: Assigning: \"elBuilder.innerHTML\" = \"wrapper.replace(\"%body\", compiledHtml)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":829}},"message":{"text":"Event #5: Writing the tainted value to property \"innerHTML\" of \"elBuilder\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":111}}}],"partialFingerprints":{"primaryLocationLineHash":"73c0f724ac62d36f71dae5601ea2c8fc"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":111}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":111}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":105}},"message":{"text":"Event #3: \"org.hdivsamples.dao.AccountDao.findUsersByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":111}},"message":{"text":"Event #4: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"NULL_RETURNS/null_pointer_dereference_exception/return_value/javascript","message":{"text":"NULL_RETURNS: Accessing a property of null-like value \"suggestion\"."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1015}}}],"partialFingerprints":{"primaryLocationLineHash":"7da525d72c9d70317e10de5b048e4432"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1015}},"message":{"text":"Event Set 1: Call to a function that returns null or undefined. See details in steps 2 - 13. (Events #1 - #12)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1004}},"message":{"text":"Event #1: Condition \"e.type === \"rightKeyed\"\", taking true branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1004}},"message":{"text":"Event #2: Condition \"(e.type === \"rightKeyed\") || (e.type === \"leftKeyed\")\", taking true branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1006}},"message":{"text":"Event #3: Condition \"this.inputView.getLanguageDirection() === \"ltr\"\", taking true branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1006}},"message":{"text":"Event #4: Condition \"e.type === \"leftKeyed\"\", taking false branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1007}},"message":{"text":"Event #5: Condition \"!isCursorAtEnd\", taking false branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1007}},"message":{"text":"Event #6: Condition \"!isCursorAtEnd || ignoreEvent\", taking false branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1013}},"message":{"text":"Event #7: Condition \"hint !== \"\"\", taking true branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1013}},"message":{"text":"Event #8: Condition \"query !== hint\", taking true branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1013}},"message":{"text":"Event #9: Condition \"(hint !== \"\") && (query !== hint)\", taking true branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1014}},"message":{"text":"Event #10: \"this.dropdownView.getFirstSuggestion\" returns \"null\" or \"undefined\" (checked 1 out of 2 times). See details in steps 14 - 15. (Events #10.1 - #10.2)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1014}},"message":{"text":"Event #11: Assigning \"suggestion\" to the \"null\" or \"undefined\" return value from \"this.dropdownView.getFirstSuggestion\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1015}},"message":{"text":"Event #12: Accessing a property of null-like value \"suggestion\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":813}},"message":{"text":"Event #10.1: Condition \"$suggestion.length > 0\", taking false branch."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":813}},"message":{"text":"Event #10.2: Explicitly returning \"null\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":1014}},"message":{"text":"See step 11 to return to event 10."}}}]}]}]}
,{"ruleId":"LOG_INJECTION/log_injection/_/java","message":{"text":"LOG_INJECTION: A tainted string \"\"Showing info for credit card:\" + number\" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed.\nRemediation Advice: Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":88}}}],"partialFingerprints":{"primaryLocationLineHash":"82d5d5ab80cf5a578ae10fe058706603"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":88}},"message":{"text":"Remediation advice: Log injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":88}},"message":{"text":"Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":86}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"number\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":86}},"message":{"text":"Event #2: Parameter \"number\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":88}},"message":{"text":"Event #3: A tainted string \"\"Showing info for credit card:\" + number\" is stored in logs.  This may allow for an attacker to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem. The value is used unsafely in bytecode, which cannot be displayed."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"reverseFirstCashAccountTransfers\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":60}}}],"partialFingerprints":{"primaryLocationLineHash":"8886e169351bd79f341bb205d2dcbf88"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":60}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":60}},"message":{"text":"Event Set 1: See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\ActivityDaoImpl.java"},"region":{"startLine":22}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\ActivityDaoImpl.java"},"region":{"startLine":23}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":54}},"message":{"text":"Event #3: \"org.hdivsamples.dao.ActivityDao.findTransactionsByCashAccountNumber(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":55}},"message":{"text":"Event #4: The tainted value \"com.google.common.collect.Lists.reverse(firstCashAccountTransfers)\" is propagated to \"reverseFirstCashAccountTransfers\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":60}},"message":{"text":"Event #5: Using the tainted data \"reverseFirstCashAccountTransfers\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"REGEX_INJECTION/regex_injection/audit/javascript","message":{"text":"REGEX_INJECTION: Calling \"RegExp\" with the tainted value in \"\"^\" + this.prefix\". This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.\nRemediation Advice: Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":201}}}],"partialFingerprints":{"primaryLocationLineHash":"8ec7927213f4db89f60af4a7c174a806"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":201}},"message":{"text":"Remediation advice: Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":201}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 9. (Events #1 - #7)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":198}},"message":{"text":"Event #1: \"namespace\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":199}},"message":{"text":"Event #2: Assigning: \"<storage from new>[1]\" = \"namespace\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":199}},"message":{"text":"Event #3: Calling \"([\"__\", namespace, \"__\"]).join(\"\")\" passes \"[\"__\", namespace, \"__\"][*]\" to its return value."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":199}},"message":{"text":"Event #4: Assigning: \"this.prefix\" = \"([\"__\", namespace, \"__\"]).join(\"\")\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":201}},"message":{"text":"Event #5: Creating a tainted string using \"this.prefix\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":201}},"message":{"text":"Event #6: Passing \"\"^\" + this.prefix\" to \"RegExp\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":201}},"message":{"text":"Event #7: Calling \"RegExp\" with the tainted value in \"\"^\" + this.prefix\". This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"reverseFirstCashAccountTransfers\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":79}}}],"partialFingerprints":{"primaryLocationLineHash":"949611679af7ae98f113ac666cf70051"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":79}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":79}},"message":{"text":"Event Set 1: See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\ActivityDaoImpl.java"},"region":{"startLine":22}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\ActivityDaoImpl.java"},"region":{"startLine":23}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":73}},"message":{"text":"Event #3: \"org.hdivsamples.dao.ActivityDao.findTransactionsByCashAccountNumber(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":74}},"message":{"text":"Event #4: The tainted value \"com.google.common.collect.Lists.reverse(firstCashAccountTransfers)\" is propagated to \"reverseFirstCashAccountTransfers\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":79}},"message":{"text":"Event #5: Using the tainted data \"reverseFirstCashAccountTransfers\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"PATH_MANIPULATION/path_manipulation/_/java","message":{"text":"PATH_MANIPULATION: Constructing a path or URI using the tainted value \"url + name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":29}}}],"partialFingerprints":{"primaryLocationLineHash":"9aea74cea2c0b488abc5a6d374fff4b2"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":29}},"message":{"text":"Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":29}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":14}},"message":{"text":"Event #1: Reading data from an aggressive or audit dataflow source. In this case, unwritten fields are treated as tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":14}},"message":{"text":"Event #2: Tainted data was stored to field \"url\", which is defined here. This field is now considered to be tainted data throughout the program."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":29}},"message":{"text":"Event #3: Reading the tainted data from the field \"url\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":29}},"message":{"text":"Event #4: Constructing a path or URI using the tainted value \"url + name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."}}}]}]}]}
,{"ruleId":"DOM_XSS/xss/audit_dom_xss/javascript","message":{"text":"DOM_XSS: Calling \"setTimeout\" with the tainted value in \"fn\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.\nRemediation Advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}}}],"partialFingerprints":{"primaryLocationLineHash":"9ca25dfc46469b979adaacf0e6f123d7"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Remediation advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":81}},"message":{"text":"Event #1: \"fn\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Event #2: Passing \"fn\" to \"setTimeout\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":82}},"message":{"text":"Event #3: Calling \"setTimeout\" with the tainted value in \"fn\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser."}}}]}]}]}
,{"ruleId":"RESOURCE_LEAK/resource_leak/exceptional_path/java","message":{"text":"RESOURCE_LEAK: Variable \"fos\" going out of scope leaks the resource it refers to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":175}}}],"partialFingerprints":{"primaryLocationLineHash":"a05bcd1a3a3639cb55cdbc6356272c20"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":175}},"message":{"text":"Event Set 1: See details in steps 2 - 8. (Events #1 - #7)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":173}},"message":{"text":"Event #1: \"new java.io.FileOutputStream(tmpFile)\" creates a new resource."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":173}},"message":{"text":"Event #2: Assigning: \"fos\" = resource returned from \"new java.io.FileOutputStream(tmpFile)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":174}},"message":{"text":"Event #3: Assigning: \"oos\" = resource returned from \"new java.io.ObjectOutputStream(fos)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":175}},"message":{"text":"Event #4: Resource \"oos\" is not closed or saved in \"writeObject\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":175}},"message":{"text":"Event #5: Throwing \"java.io.IOException\" (or subclass) from call to \"writeObject\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":175}},"message":{"text":"Event #6: Variable \"oos\" going out of scope leaks the resource it refers to."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":175}},"message":{"text":"Event #7: Variable \"fos\" going out of scope leaks the resource it refers to."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":76}}}],"partialFingerprints":{"primaryLocationLineHash":"aae84fbe9c808ee945fe81ae2fc57d48"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":76}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":76}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":70}},"message":{"text":"Event #3: \"org.hdivsamples.dao.AccountDao.findUsersByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":76}},"message":{"text":"Event #4: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"PATH_MANIPULATION/path_manipulation/_/java","message":{"text":"PATH_MANIPULATION: Constructing a path or URI using the tainted value \"url + fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":18}}}],"partialFingerprints":{"primaryLocationLineHash":"af44dbd481ee63c4a8b84d35f041cdfb"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":18}},"message":{"text":"Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":18}},"message":{"text":"Event Set 1: See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":82}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"image\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":82}},"message":{"text":"Event #2: Parameter \"image\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":84}},"message":{"text":"Event #3: Passing the tainted data, \"image\", in virtual call to \"org.hdivsamples.facade.StorageFacadeImpl.exists(java.lang.String)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":17}},"message":{"text":"Event #4: Parameter \"fileName\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\facade\\StorageFacadeImpl.java"},"region":{"startLine":18}},"message":{"text":"Event #5: Constructing a path or URI using the tainted value \"url + fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":92}}}],"partialFingerprints":{"primaryLocationLineHash":"b4b129bef9ccd2fe110f738f1b0ba6e0"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":92}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":92}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":90}},"message":{"text":"Event #3: \"org.hdivsamples.dao.AccountDao.findUsersByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":92}},"message":{"text":"Event #4: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"creditAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":64}}}],"partialFingerprints":{"primaryLocationLineHash":"ba4b5aee4bd454e07d34154cf59221e3"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":64}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":64}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CreditAccountImpl.java"},"region":{"startLine":35}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CreditAccountImpl.java"},"region":{"startLine":35}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":60}},"message":{"text":"Event #3: \"org.hdivsamples.dao.CreditAccountDao.findCreditAccountsByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":64}},"message":{"text":"Event #4: Using the tainted data \"creditAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"number\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":80}}}],"partialFingerprints":{"primaryLocationLineHash":"bad2ace12cfabb8c3029021d49a02d91"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":80}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":80}},"message":{"text":"Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":67}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"number\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":67}},"message":{"text":"Event #2: Parameter \"number\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":80}},"message":{"text":"Event #3: Using the tainted data \"number\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":58}}}],"partialFingerprints":{"primaryLocationLineHash":"bbd919310d71d533f76968f1e4c2cd2f"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":58}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":58}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":52}},"message":{"text":"Event #3: \"org.hdivsamples.dao.CashAccountDao.findCashAccountsByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":58}},"message":{"text":"Event #4: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"CSRF/csrf/filesystem_modification/java","message":{"text":"CSRF: \"org.hdivsamples.controllers.DashboardController.getMaliciousCertificate\" is a web-app entry point that requires protection from cross-site request forgery (CSRF).\nRemediation Advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":163}}}],"partialFingerprints":{"primaryLocationLineHash":"c236d5fb4d551eb3c2b50fbaad732a52"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":163}},"message":{"text":"Remediation advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":163}},"message":{"text":"Event Set 1: CSRF validation required. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":163}},"message":{"text":"Event #1: \"org.hdivsamples.controllers.DashboardController.getMaliciousCertificate\" is a web-app entry point that requires protection from cross-site request forgery (CSRF)."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":163}},"message":{"text":"Event #2: No CSRF protection was detected anywhere in this application. If this is not correct, please refer to the CSRF checker reference on how to specify it via checker option."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":173}},"message":{"text":"Event #3: Calling \"FileOutputStream\" modifies the filesystem."}}}]}]}]}
,{"ruleId":"REGEX_INJECTION/regex_injection/audit/javascript","message":{"text":"REGEX_INJECTION: Calling \"RegExp\" with the tainted value in \"\"^(?:\" + escapedQuery + \")(.*$)\"\". This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program.\nRemediation Advice: Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":950}}}],"partialFingerprints":{"primaryLocationLineHash":"c2d8c1582979387bde43efca724bf85d"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":950}},"message":{"text":"Remediation advice: Regular expression injection vulnerabilities can be addressed by validating that the user-controllable input conforms to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":950}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":949}},"message":{"text":"Event #1: \"utils.escapeRegExChars(query)\" invokes an unknown or unresolved function which might return untrusted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":949}},"message":{"text":"Event #2: Assigning: \"escapedQuery\" = \"utils.escapeRegExChars(query)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":950}},"message":{"text":"Event #3: Creating a tainted string using \"escapedQuery\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":950}},"message":{"text":"Event #4: Passing \"\"^(?:\" + escapedQuery + \")(.*$)\"\" to \"RegExp\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":950}},"message":{"text":"Event #5: Calling \"RegExp\" with the tainted value in \"\"^(?:\" + escapedQuery + \")(.*$)\"\". This constructs a regular expression using the tainted value and may thus allow an attacker to retrieve sensitive information or alter the behavior of the program."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":75}}}],"partialFingerprints":{"primaryLocationLineHash":"c448680d123018976d692234ed2ffb34"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":75}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":75}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":71}},"message":{"text":"Event #3: \"org.hdivsamples.dao.AccountDao.findUsersByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":75}},"message":{"text":"Event #4: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":76}}}],"partialFingerprints":{"primaryLocationLineHash":"c448680d123018976d692234ed2ffb34"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":76}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":76}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":71}},"message":{"text":"Event #3: \"org.hdivsamples.dao.AccountDao.findUsersByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":76}},"message":{"text":"Event #4: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"DOM_XSS/xss/audit_dom_xss/javascript","message":{"text":"DOM_XSS: Calling \"$\" with the tainted value in \"nPaging\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.\nRemediation Advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":148}}}],"partialFingerprints":{"primaryLocationLineHash":"c4c8609433c307d75d3cfeb9f94b9bf7"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":148}},"message":{"text":"Remediation advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":148}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":139}},"message":{"text":"Event #1: \"nPaging\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":148}},"message":{"text":"Event #2: Passing \"nPaging\" to \"$\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":148}},"message":{"text":"Event #3: Calling \"$\" with the tainted value in \"nPaging\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser."}}}]}]}]}
,{"ruleId":"LOCALSTORAGE_MANIPULATION/localstorage_manipulation/audit/javascript","message":{"text":"LOCALSTORAGE_MANIPULATION: Calling \"ls.setItem\" with the tainted value in \"this._prefix(key)\". Using untrusted data as a key in \"localStorage\".  An attacker may be able to change the behavior of the application by introducing new keys or overwriting data at a sensitive key.\nRemediation Advice: Consider whether it is necessary to allow the user any control over this key.  If so, ensure that the value cannot interfere with other keys that your application uses for example, by ensuring that the user-specified key has a specific prefix or is one of a fixed set of constant strings (whitelisting)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}}}],"partialFingerprints":{"primaryLocationLineHash":"c712867b8d90a0a68af0f1a3c93b9667"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Remediation advice: Consider whether it is necessary to allow the user any control over this key.  If so, ensure that the value cannot interfere with other keys that your application uses for example, by ensuring that the user-specified key has a specific prefix or is one of a fixed set of constant strings (whitelisting)."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 4 - 7. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event Set 2: Additional context. See details in steps 8 - 10. (Events #A1 - #A3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #1: \"key\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event #2: Calling \"this._prefix\". This call assigns \"key\" to \"<return value>\". Now \"<return value>\" is tainted. See details in steps 11 - 12. (Events #2.1 - #2.2)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event #3: Passing \"this._prefix(key)\" to \"ls.setItem\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event #4: Calling \"ls.setItem\" with the tainted value in \"this._prefix(key)\". Using untrusted data as a key in \"localStorage\".  An attacker may be able to change the behavior of the application by introducing new keys or overwriting data at a sensitive key."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":192}},"message":{"text":"Event #A1: Assigning: \"ls\" = \"window.localStorage\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #A2: Assigning: \"<storage from new>[\"set\"]\" = \"function\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #A3: Calling at a later point \"methods.set\". This call passes tainted data to a sensitive sink. See details in steps 14 - 17. (Events #A3.1 - #A3.4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #2.1: Creating a tainted string using \"key\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #2.2: Returning a tainted string."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"See step 5 to return to event 2."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #A3.1: \"key\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event #A3.2: Calling \"this._prefix\". This call assigns \"key\" to \"<return value>\". Now \"<return value>\" is tainted. See details in steps 19 - 20. (Events #A3.2.1 - #A3.2.2)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event #A3.3: Passing \"this._prefix(key)\" to \"ls.setItem\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"Event #A3.4: Calling \"ls.setItem\" with the tainted value in \"this._prefix(key)\". Using untrusted data as a key in \"localStorage\".  An attacker may be able to change the behavior of the application by introducing new keys or overwriting data at a sensitive key."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"See step 10 to return to event A3."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #A3.2.1: Creating a tainted string using \"key\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #A3.2.2: Returning a tainted string."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":223}},"message":{"text":"See step 15 to return to event A3.2."}}}]}]}]}
,{"ruleId":"LOCALSTORAGE_MANIPULATION/localstorage_manipulation/audit/javascript","message":{"text":"LOCALSTORAGE_MANIPULATION: Calling \"ls.setItem\" with the tainted value in \"this._ttlKey(key)\". Using untrusted data as a key in \"localStorage\".  An attacker may be able to change the behavior of the application by introducing new keys or overwriting data at a sensitive key.\nRemediation Advice: Consider whether it is necessary to allow the user any control over this key.  If so, ensure that the value cannot interfere with other keys that your application uses for example, by ensuring that the user-specified key has a specific prefix or is one of a fixed set of constant strings (whitelisting)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}}}],"partialFingerprints":{"primaryLocationLineHash":"c712867b8d90a0a68af0f1a3c93b9667"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Remediation advice: Consider whether it is necessary to allow the user any control over this key.  If so, ensure that the value cannot interfere with other keys that your application uses for example, by ensuring that the user-specified key has a specific prefix or is one of a fixed set of constant strings (whitelisting)."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 4 - 7. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event Set 2: Additional context. See details in steps 8 - 10. (Events #A1 - #A3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #1: \"key\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event #2: Calling \"this._ttlKey\". This call assigns \"key\" to \"<return value>\". Now \"<return value>\" is tainted. See details in steps 11 - 13. (Events #2.1 - #2.3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event #3: Passing \"this._ttlKey(key)\" to \"ls.setItem\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event #4: Calling \"ls.setItem\" with the tainted value in \"this._ttlKey(key)\". Using untrusted data as a key in \"localStorage\".  An attacker may be able to change the behavior of the application by introducing new keys or overwriting data at a sensitive key."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":192}},"message":{"text":"Event #A1: Assigning: \"ls\" = \"window.localStorage\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #A2: Assigning: \"<storage from new>[\"set\"]\" = \"function\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #A3: Calling at a later point \"methods.set\". This call passes tainted data to a sensitive sink. See details in steps 15 - 18. (Events #A3.1 - #A3.4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"Event #2.1: Calling \"this._prefix\". This call assigns \"key\" to \"<return value>\". See details in steps 20 - 21. (Events #2.1.1 - #2.1.2)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"Event #2.2: Creating a tainted string using \"this._prefix(key)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"Event #2.3: Returning a tainted string."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"See step 5 to return to event 2."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"Event #A3.1: \"key\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event #A3.2: Calling \"this._ttlKey\". This call assigns \"key\" to \"<return value>\". Now \"<return value>\" is tainted. See details in steps 23 - 25. (Events #A3.2.1 - #A3.2.3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event #A3.3: Passing \"this._ttlKey(key)\" to \"ls.setItem\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"Event #A3.4: Calling \"ls.setItem\" with the tainted value in \"this._ttlKey(key)\". Using untrusted data as a key in \"localStorage\".  An attacker may be able to change the behavior of the application by introducing new keys or overwriting data at a sensitive key."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":217}},"message":{"text":"See step 10 to return to event A3."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #2.1.1: Creating a tainted string using \"key\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #2.1.2: Returning a tainted string."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"See step 11 to return to event 2.1."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"Event #A3.2.1: Calling \"this._prefix\". This call assigns \"key\" to \"<return value>\". See details in steps 27 - 28. (Events #A3.2.1.1 - #A3.2.1.2)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"Event #A3.2.2: Creating a tainted string using \"this._prefix(key)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"Event #A3.2.3: Returning a tainted string."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":219}},"message":{"text":"See step 16 to return to event A3.2."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #A3.2.1.1: Creating a tainted string using \"key\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":206}},"message":{"text":"Event #A3.2.1.2: Returning a tainted string."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\typeahead\\typeahead.js"},"region":{"startLine":209}},"message":{"text":"See step 23 to return to event A3.2.1."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":62}}}],"partialFingerprints":{"primaryLocationLineHash":"d6ba639bb1e15ada09d9b29b708c6ea6"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":62}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":62}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\AccountDaoImpl.java"},"region":{"startLine":54}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":57}},"message":{"text":"Event #3: \"org.hdivsamples.dao.AccountDao.findUsersByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":62}},"message":{"text":"Event #4: Using the tainted data \"account\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"creditAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":74}}}],"partialFingerprints":{"primaryLocationLineHash":"d94a63843bdda89f293fdeed7fa6718c"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":74}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":74}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CreditAccountImpl.java"},"region":{"startLine":35}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CreditAccountImpl.java"},"region":{"startLine":35}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":72}},"message":{"text":"Event #3: \"org.hdivsamples.dao.CreditAccountDao.findCreditAccountsByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":74}},"message":{"text":"Event #4: Using the tainted data \"creditAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"RESOURCE_LEAK/resource_leak/exceptional_path/java","message":{"text":"RESOURCE_LEAK: Variable \"fos\" going out of scope leaks the resource it refers to."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":134}}}],"partialFingerprints":{"primaryLocationLineHash":"e2cad492644e66e3d2642c7f75a33463"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":134}},"message":{"text":"Event Set 1: See details in steps 2 - 8. (Events #1 - #7)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":132}},"message":{"text":"Event #1: \"new java.io.FileOutputStream(tmpFile)\" creates a new resource."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":132}},"message":{"text":"Event #2: Assigning: \"fos\" = resource returned from \"new java.io.FileOutputStream(tmpFile)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":133}},"message":{"text":"Event #3: Assigning: \"oos\" = resource returned from \"new java.io.ObjectOutputStream(fos)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":134}},"message":{"text":"Event #4: Resource \"oos\" is not closed or saved in \"writeObject\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":134}},"message":{"text":"Event #5: Throwing \"java.io.IOException\" (or subclass) from call to \"writeObject\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":134}},"message":{"text":"Event #6: Variable \"oos\" going out of scope leaks the resource it refers to."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":134}},"message":{"text":"Event #7: Variable \"fos\" going out of scope leaks the resource it refers to."}}}]}]}]}
,{"ruleId":"UNSAFE_DESERIALIZATION/unsafe_deserialization/_/java","message":{"text":"UNSAFE_DESERIALIZATION: A tainted value \"file.getInputStream()\" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code.\nRemediation Advice: If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":155}}}],"partialFingerprints":{"primaryLocationLineHash":"e337de0a6b4ff311d30e0b6faf3bf8c7"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":155}},"message":{"text":"Remediation advice: If possible, use pure data formats such as JSON or XML to serialize and deserialize untrusted data.  Otherwise, if you must use native serialization methods, check the integrity of the data (for example with HMAC) before deserializing it."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":155}},"message":{"text":"Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":155}},"message":{"text":"Event #1: \"org.springframework.web.multipart.MultipartFile.getInputStream()\" returns data from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":155}},"message":{"text":"Event #2: A tainted value \"file.getInputStream()\" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"reverseFirstCashAccountTransfers\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":114}}}],"partialFingerprints":{"primaryLocationLineHash":"e7499c8374bc311a518326f8d8705a87"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":114}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":114}},"message":{"text":"Event Set 1: See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\ActivityDaoImpl.java"},"region":{"startLine":22}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\ActivityDaoImpl.java"},"region":{"startLine":23}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":108}},"message":{"text":"Event #3: \"org.hdivsamples.dao.ActivityDao.findTransactionsByCashAccountNumber(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":109}},"message":{"text":"Event #4: The tainted value \"com.google.common.collect.Lists.reverse(firstCashAccountTransfers)\" is propagated to \"reverseFirstCashAccountTransfers\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":114}},"message":{"text":"Event #5: Using the tainted data \"reverseFirstCashAccountTransfers\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":77}}}],"partialFingerprints":{"primaryLocationLineHash":"e7a60db917269c7922cb09232a2c3b1d"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":77}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":77}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #1: Reading data from the database, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\dao\\CashAccountImpl.java"},"region":{"startLine":36}},"message":{"text":"Event #2: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":71}},"message":{"text":"Event #3: \"org.hdivsamples.dao.CashAccountDao.findCashAccountsByUsername(java.lang.String)\" returns the tainted data. All elements of the collection are considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":77}},"message":{"text":"Event #4: Using the tainted data \"cashAccounts\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"RESOURCE_LEAK/resource_leak/exceptional_path/java","message":{"text":"RESOURCE_LEAK: Failing to save or close resource created by \"new java.io.FileInputStream(tmpFile)\" leaks it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":182}}}],"partialFingerprints":{"primaryLocationLineHash":"e82b117ee39528e88bf2e36cb10cec97"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":182}},"message":{"text":"Event Set 1: See details in steps 2 - 5. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":182}},"message":{"text":"Event #1: \"new java.io.FileInputStream(tmpFile)\" creates a new resource."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":182}},"message":{"text":"Event #2: Throwing \"java.io.IOException\" (or subclass) from call to \"getOutputStream\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":187}},"message":{"text":"Event #3: Catching exception."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":182}},"message":{"text":"Event #4: Failing to save or close resource created by \"new java.io.FileInputStream(tmpFile)\" leaks it."}}}]}]}]}
,{"ruleId":"XSS/xss/_/java","message":{"text":"XSS: Printing \"buf\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(buf)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":199}}}],"partialFingerprints":{"primaryLocationLineHash":"e97a7efd3610ff63b037e2b7023a37d3"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":199}},"message":{"text":"Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(buf)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":199}},"message":{"text":"Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":182}},"message":{"text":"Event #1: Reading data from a file, which is considered tainted."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":182}},"message":{"text":"Event #2: Passing the tainted data, \"new java.io.FileInputStream(tmpFile)\", to \"org.hdivsamples.controllers.DashboardController.writeResponse(java.io.InputStream, java.io.OutputStream)\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":193}},"message":{"text":"Event #3: Parameter \"is\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":198}},"message":{"text":"Event #4: Passing the tainted data through \"java.io.InputStream.read(byte[])\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":199}},"message":{"text":"Event #5: Printing \"buf\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."}}}]}]}]}
,{"ruleId":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","message":{"text":"TRUST_BOUNDARY_VIOLATION: Using the tainted data \"(org.hdivsamples.bean.CashAccount)cashAccounts.get(0).getNumber()\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":61}}}],"partialFingerprints":{"primaryLocationLineHash":"e9e58d9b6c86c2c1f05880cf265f3d9c"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":61}},"message":{"text":"Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":61}},"message":{"text":"Event Set 1: See details in steps 3 - 10. (Events #1 - #8)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":99}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"cashAccount\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":99}},"message":{"text":"Event #2: An instance of \"CashAccount\" was created using tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\bean\\CashAccount.java"},"region":{"startLine":7}},"message":{"text":"Event #3: Creating an instance of \"CashAccount\" with tainted data initializes member \"number\" with tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\bean\\CashAccount.java"},"region":{"startLine":7}},"message":{"text":"Event #4: Tainted data was stored to field \"number\", which is defined here. This field is now considered to be tainted data throughout the program."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\bean\\CashAccount.java"},"region":{"startLine":24}},"message":{"text":"Event #5: Reading the tainted data from the field \"number\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"https://github.com/sig-demo/arthur/blob/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/runner\\work\\insecure-bank\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\bean\\CashAccount.java"},"region":{"startLine":24}},"message":{"text":"Event #6: Returning the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":61}},"message":{"text":"Event #7: \"org.hdivsamples.bean.CashAccount.getNumber()\" returns the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\ActivityController.java"},"region":{"startLine":61}},"message":{"text":"Event #8: Using the tainted data \"(org.hdivsamples.bean.CashAccount)cashAccounts.get(0).getNumber()\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."}}}]}]}]}
,{"ruleId":"DOM_XSS/xss/audit_dom_xss/javascript","message":{"text":"DOM_XSS: Calling \"$\" with the tainted value in \"host\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser.\nRemediation Advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":110}}}],"partialFingerprints":{"primaryLocationLineHash":"f5b120abc2ac23823bfb0e25a5f3f3c9"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":110}},"message":{"text":"Remediation advice: The untrusted data reaches a sink that can either lead to HTML injection, JavaScript code execution, or the manipulation of a URL starting with the \"javascript:\" or \"data:\" schemes. Any of these can lead to a DOM XSS vulnerability.\n* HTML injection: Either escape properly the untrusted data or use a safe API to insert this data to the DOM; direct HTML manipulation as text should be avoided.\n* JavaScript code execution: Validate any untrusted data against a whitelist so it's not possible for an attacker to have its supplied code executing.\n* URL manipulation: Make sure the scheme is whitelisted and doesn't allow for the injection of a URL like: \"data:text/html;,<img/src/onerror=alert(1)>\".\n"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":110}},"message":{"text":"Event Set 1: Flow of tainted data to a vulnerable sink. See details in steps 3 - 5. (Events #1 - #3)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":24}},"message":{"text":"Event #1: \"host\" may assume any value when called by an unknown or untrusted caller."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":110}},"message":{"text":"Event #2: Passing \"host\" to \"$\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\target\\insecure-bank.war\\resources\\js\\plugins\\datatable\\dataTables.bootstrap.js"},"region":{"startLine":110}},"message":{"text":"Event #3: Calling \"$\" with the tainted value in \"host\". This allows a cross-site scripting attack: an attacker can execute arbitrary JavaScript code in another user's web browser."}}}]}]}]}
,{"ruleId":"RESOURCE_LEAK/resource_leak/exceptional_path/java","message":{"text":"RESOURCE_LEAK: Failing to save or close resource created by \"new java.io.FileInputStream(tmpFile)\" leaks it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":140}}}],"partialFingerprints":{"primaryLocationLineHash":"f8fab53ca9d40a90637ef98166353ca6"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":140}},"message":{"text":"Event Set 1: See details in steps 2 - 5. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":140}},"message":{"text":"Event #1: \"new java.io.FileInputStream(tmpFile)\" creates a new resource."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":140}},"message":{"text":"Event #2: Throwing \"java.io.IOException\" (or subclass) from call to \"getOutputStream\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":145}},"message":{"text":"Event #3: Catching exception."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":140}},"message":{"text":"Event #4: Failing to save or close resource created by \"new java.io.FileInputStream(tmpFile)\" leaks it."}}}]}]}]}
,{"ruleId":"URL_MANIPULATION/url_manipulation/bad_web_uri/java","message":{"text":"URL_MANIPULATION: Constructing a URL using the tainted value \"u\". This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website.\nRemediation Advice: URL manipulation vulnerabilities can be addressed by proper input validation. Allow listing the allowed scheme and authority, and deny listing characters that allow unsafe path traversal in the path and query parts of the URL can improve security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":102}}}],"partialFingerprints":{"primaryLocationLineHash":"ffbd94a7358afa405770a5a4ac17bbb9"},"codeFlows":[{"threadFlows":[{"locations":[{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":102}},"message":{"text":"Remediation advice: URL manipulation vulnerabilities can be addressed by proper input validation. Allow listing the allowed scheme and authority, and deny listing characters that allow unsafe path traversal in the path and query parts of the URL can improve security."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":102}},"message":{"text":"Event Set 1: See details in steps 3 - 6. (Events #1 - #4)"}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":97}},"message":{"text":"Event #1: Entering this function as a framework entry point. Parameter \"image\" is tainted because it comes from an HTTP request."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":97}},"message":{"text":"Event #2: Parameter \"image\" receives the tainted data."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":101}},"message":{"text":"Event #3: The tainted value \"new java.net.URL(image)\" is propagated to \"u\"."}}},{"location":{"physicalLocation":{"artifactLocation":{"uri":"Apps\\Java\\insecure-bank\\src\\main\\java\\org\\hdivsamples\\controllers\\DashboardController.java"},"region":{"startLine":102}},"message":{"text":"Event #4: Constructing a URL using the tainted value \"u\". This may allow an attacker to access or modify critical or sensitive files, or redirect to a malicious website."}}}]}]}]}
],
    "tool": {
      "driver": {
        "name": "Coverity",
        "organization": "Synopsys",
        "rules": [{"id":"TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java","shortDescription":{"text":"Trust boundary violation"},"fullDescription":{"text":"A user-controllable string is stored in a trusted data structure: The tainted data can be mixed with trustworthy data and can be mistakenly used in an insecure manner."},"defaultConfiguration":{"level":"note"},"properties":{"tags":[]}},{"id":"LOCALSTORAGE_WRITE/localstorage_write/_/javascript","shortDescription":{"text":"localStorage write"},"fullDescription":{"text":"Writing data to localStorage: Sensitive data in localStorage can be exposed if other vulnerabilities such as XSS are exploitable."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"CSRF/csrf/filesystem_modification/java","shortDescription":{"text":"Cross-site request forgery"},"fullDescription":{"text":"The web application controller modifies data or state and is unprotected from cross-site request forgery: Controllers that execute actions or tasks may be accessed to perform activities without the user's knowledge or authorization. These attacks are difficult to distinguish from legitimate requests."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"URL_MANIPULATION/url_manipulation/audit/javascript","shortDescription":{"text":"URL manipulation"},"fullDescription":{"text":"Constructing an HTTP request URL using a user-controllable string: An attacker may access unintended server-side functionality or make the application access a malicious website."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"DOM_XSS/xss/audit_dom_xss/javascript","shortDescription":{"text":"DOM-based cross-site scripting"},"fullDescription":{"text":"Untrusted user-supplied data is inserted into a context that can execute JavaScript: A user can execute arbitrary JavaScript on a web page viewed or accessed by another user, potentially allowing session hijacking, disclosing sensitive data in the DOM, or viewing of keyboard and mouse events."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"PATH_MANIPULATION/path_manipulation/_/java","shortDescription":{"text":"Filesystem path, filename, or URI manipulation"},"fullDescription":{"text":"A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier): An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application."},"defaultConfiguration":{"level":"error"},"properties":{"tags":[]}},{"id":"RESOURCE_LEAK/resource_leak/exceptional_path/java","shortDescription":{"text":"Resource leak on an exceptional path"},"fullDescription":{"text":"Leak of a system resource on an exception path (probably error handling): The system resource will not be reclaimed and reused, reducing the future availability of the resource."},"defaultConfiguration":{"level":"note"},"properties":{"tags":[]}},{"id":"SCRIPT_CODE_INJECTION/script_code_injection/audit/javascript","shortDescription":{"text":"Script code injection"},"fullDescription":{"text":"Script code interpreted or executed on the server is constructed from user-controllable data: An attacker may be able to alter the behavior of the program or run malicious code."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"XSS/xss/_/java","shortDescription":{"text":"Cross-site scripting"},"fullDescription":{"text":"Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering: A user can execute arbitrary JavaScript on a web page viewed or accessed by another user, potentially allowing session hijacking, disclosing sensitive data in the DOM, or viewing of keyboard and mouse events."},"defaultConfiguration":{"level":"error"},"properties":{"tags":[]}},{"id":"NULL_RETURNS/null_pointer_dereference_exception/return_value/javascript","shortDescription":{"text":"Bad use of null-like value"},"fullDescription":{"text":"Using the return value of a function that can return null or undefined without checking it for null or undefined: If the function returns a null or undefined value, this code will cause an exception such as a TypeError."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"LOG_INJECTION/log_injection/_/java","shortDescription":{"text":"Log injection"},"fullDescription":{"text":"User-controllable data is stored in logs: An attacker may be able to forge log messages to confuse automated log parsing tools or humans trying to diagnose an attack or other problem."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"REGEX_INJECTION/regex_injection/audit/javascript","shortDescription":{"text":"Regular expression injection"},"fullDescription":{"text":"A regular expression is constructed from a user-controllable string: An attacker may be able to retrieve sensitive information, alter the behavior of the program, or exhaust resources within the application."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"LOCALSTORAGE_MANIPULATION/localstorage_manipulation/audit/javascript","shortDescription":{"text":"localStorage manipulation"},"fullDescription":{"text":"A user-controllable string is used to construct a key in localStorage: An attacker may be able to affect the behavior of the application by overwriting sensitive keys in localStorage."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}},{"id":"UNSAFE_DESERIALIZATION/unsafe_deserialization/_/java","shortDescription":{"text":"Unsafe deserialization"},"fullDescription":{"text":"A user-controllable string is deserialized: An attacker can instantiate arbitrary classes, possibly resulting in a denial of service or potentially unintended code execution."},"defaultConfiguration":{"level":"error"},"properties":{"tags":[]}},{"id":"URL_MANIPULATION/url_manipulation/bad_web_uri/java","shortDescription":{"text":"URL manipulation"},"fullDescription":{"text":"A user-controllable string is used to specify a URL that is used in a connection. An attacker can modify the URL scheme to access a local file. An attacker can also mount a phishing attack by modifying the URL value to point to a malicious website: An attacker may access unintended files or make the application access a malicious website."},"defaultConfiguration":{"level":"warning"},"properties":{"tags":[]}}]
      }
    }
  }]
}